MongoDB(документоориентированная база данных)-noSQL язык = не используются какие либо команды
Вместо таблиц и строк,использует КОЛЛЕКЦИИ и ДОКУМЕНТЫ
На разных ПК могут храниться разные базы и ЛЕГКО ОБМЕНИВАТЬСЯ данными
Документы-BSON
Пример:
{
"title":"Pulp Fiction",
"director":"Quentin Tarantino",
"year":1994,
"genres":["crime","drama"],
"rating":8.9
}
В документах легко реализуется ВЛОЖЕННОСТЬ

--------------Терминал 
mongosh-зайти в терминал mongoDB
show dbs-показать базы данных
use NAME - зайти базу
cls = clear
show collection - показать коллекцию в бд 
db.movies.insertOne({})-добавить 1 элемент
db.movies.insertMany({})-добавить много элементов

------Методы поиска
Поиск документов в терминале осуществлен таким образом,что выводит первые 20 документов
Чтобы посмотреть следующие 20 нужно ввести it
db.movies.find({условие}) - поиск данных
db.movies.find({условие},{проекция}) - проекция это выбор пользователем какие строки надо выводить /n
синтаксис {title:1,name:1} -передаем 1 чтобы дать прогге понять,что хотим вывести именно эту строку
db.movies.findOne ({_id:ObjectId("...")}) - возвращает только ОДИН элемент,в основном это используют /n
только с id
-----Лимит и сортировка
db.movies.find().count() - возвращает количество всех документов 
db.movies.find().limit() - позволяет сделать ограничение документов поиска


Сортировка в компасе осуществляется в поле sort 
Есть 2 типа сортировки 1 - по возрастанию, -1  - по убыванию
----Вложенные документы
db.movies.drop()-удалить коллекцию

----Операторы и составные запросы
Синтаксис:{rating:{$gt:9}}
$gt(great then)-оператор больше > СТРОГИЙ ЗНАК
$lt - оператор меньше < СТРОГИЙ ЗНАК
$gte и $lte - имеют НЕ строгий знак то есть: >= и <=
$eq - оператор который выводит только то значение которое ему присвоили,также как и find()
$ne - оператор который выводит  все значения кроме того которое ему присвоили, != %
$or - оператор который работает по принципу логической функции ИЛИ /n
Важно что создается массив условий 
Синтаксис $or:
db.movies.find({$or:[{director:"Quentin Tarantinod"},{director:"Guy Ritchie"}]})
$in - оператор который работает по принципу включенных значений в массив удовлетворяющих условие
Синтаксис $in:
db.movies.find({rating:{$in:[8.4,6.7,4.3]}})
$nin - оператор отрицания $in (!=$in)
----Запросы вложенных документов
Вложенные запросы имеют такой же синтаксис как и поверхностные объекты
Синтаксис таких документов: genres:["crime","drama","comedy"]
Представляют собой массив значений
Вызвать их можно СТРОГО с помощью find()
Пример:
db.movies.find({genres:["crime","drama"]}) --выводит жанры фильмов crime и drama
Важно!!! имеется СТРОГИЙ порядок значений в случае если документ имеет порядо genres:["drama","crime"]
То выводится НЕ БУДЕТ
Фикс:
$all-оператор работает если все элементы в массиве будет В ЛЮБОМ порядке в документе
Синтаксис:
db.movies.find({genres:{$all:["drama","crime"]}})
Разница между $all и $in
$in = [1el OR 2el OR 3el]
$all = [1el AND 2el AND 3el]
Для ВЛОЖЕННЫХ элементов используется такой синтаксис:
db.movies.find({"movies.name":"Jack"})
В случае вызова вложенного объекта используются "" и через точку имя объекта


------Удаление и обновление документов
Удаление осуществляется с  помощью метода deleteOne({_id:..})
Если хотим удалить много объектов с повторяющимися свойствами то, используем /n
deleteMany({director:"Gay Richi"}) -пример
-Обновление данных осуществляется с помощью метода 
Синтаксис:
updateOne({_id:...} ----Id используется для работы с конкретным документов
,{$set:{rating:10,year:2000}}) ---- те данные которые мы будем заменять 
Важно!!Напоминание если в метод с ONE дать свойство,которое повторяется где то еще /n
то метод выдаст ошибку или Null
В случае если мы хотим поменять несколько документов по повторяющемуся свойству(ключу) /n
то используется updateMany()
Синтаксис:
db.movies.updateMany({director:"Guy Richi"},{rating:11,name:"Dasha"})
Практика с вложенными объектами:
ТЗ:заменить все отзывы(reviews) с именем Kate на текст "Hello i am Kate"
Мой вариант:
db.movies.updateMany({"reviews.name":"Kate"},{$set:{"reviews.text":"Hello i am Kate"}})
Но выдало ошибку что не может поменять text
Фикс:
db.movies.updateMany({"reviews.name":"Kate"},{$set:{"reviews.$.text":"Hello i am Kate"}})
.$.-фиксит






 










